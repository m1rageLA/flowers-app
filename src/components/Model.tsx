/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei/native'
import { GLTF } from 'three-stdlib'
//@ts-ignore—å
import { Asset } from 'expo-asset';

type GLTFResult = GLTF & {
  nodes: {
    charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_1: THREE.SkinnedMesh
    charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_2: THREE.SkinnedMesh
    charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_3: THREE.SkinnedMesh
    charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_4: THREE.SkinnedMesh
    charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_5: THREE.SkinnedMesh
    pelvis: THREE.Bone
  }
  materials: {
    glove_fullfinger: THREE.MeshStandardMaterial
    tm_phoenix_heavy_lwr_body: THREE.MeshPhysicalMaterial
    tm_phoenix_heavy_upr_body: THREE.MeshPhysicalMaterial
    tm_phoenix_heavy_balaclava: THREE.MeshPhysicalMaterial
    tm_phoenix_balaclava_ballistic: THREE.MeshPhysicalMaterial
  }
}

const asset = Asset.fromModule(require('../assets/HEAVY T.glb'));
export default function Model(props: JSX.IntrinsicElements['group']) {

  const { nodes, materials } = useGLTF(asset.uri) as GLTFResult;
  
  return (
    <group {...props} dispose={null} scale={1}>
      <group rotation={[-Math.PI / 2, 0, -Math.PI / 2]} scale={0.025}>
        <primitive object={nodes.pelvis} />
        <skinnedMesh
          geometry={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_1.geometry}
          material={materials.glove_fullfinger}
          skeleton={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_1.skeleton}
        />
        <skinnedMesh
          geometry={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_2.geometry}
          material={materials.tm_phoenix_heavy_lwr_body}
          skeleton={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_2.skeleton}
        />
        <skinnedMesh
          geometry={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_3.geometry}
          material={materials.tm_phoenix_heavy_upr_body}
          skeleton={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_3.skeleton}
        />
        <skinnedMesh
          geometry={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_4.geometry}
          material={materials.tm_phoenix_heavy_balaclava}
          skeleton={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_4.skeleton}
        />
        <skinnedMesh
          geometry={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_5.geometry}
          material={materials.tm_phoenix_balaclava_ballistic}
          skeleton={nodes.charactersmodelstm_phoenix_heavytm_phoenix_heavyvmdl_cdefa_5.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload(asset.uri)
